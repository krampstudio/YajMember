/**
 * Build 
 * 
 * @requires gradle >= 1.2
 * 
 * Tasks:
 * 
 * - compile: 				gradle compileJava
 * - test: 					gradle test
 * - single unit test: 		gradle test -Dtest.single=TestClassName
 * - run the app in dev: 	gradle jettyRun
 * - data import:			gradle bulk -Ptarget=event
 * 							gradle bulk -Ptarget=member
 * 
 * Debug:
 * To remote debug when running the web server using jettyRun, export the following variable:
 * 		export GRADLE_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,address=9999,server=y"
 * To debug a bulk task, set the debug option to true
 */

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'

//yes, we use the current stable version of Java ;)
sourceCompatibility = 1.7

//depdency management
repositories { mavenCentral() }

dependencies {
	compile 'org.mongodb:mongo-java-driver:2.10.1'
	compile 'org.apache.commons:commons-lang3:3.1'
	compile "javax.servlet:servlet-api:$servletVersion"
	compile "com.google.code.gson:gson:$gsonVersion"
	compile "com.google.inject:guice:$guiceVersion"
	compile "com.google.guava:guava:$guavaVersion"
	compile "com.sun.jersey:jersey-bundle:$jerseyVersion"
	compile "com.sun.jersey.contribs:jersey-guice:$jerseyVersion"
	compile "com.sun.jersey.contribs:jersey-multipart:$jerseyVersion"
	compile "net.sf.supercsv:super-csv:$superCsvVersion"
	compile "org.imgscalr:imgscalr-lib:$scalrVersion"
	testCompile "junit:junit:$junitVersion"
	testCompile "org.jukito:jukito:1.1"
}


//jetty conf
httpPort = 8000
stopPort = 8989
stopKey = 'stopMe'

//in development, we use a different jetty webdefault.xml to set the useFileMappedBuffer to false
//to enable file modification when the in place server is running
jettyRun{
	webDefaultXml = file('src/main/config/webdefault.xml')
}

/*
 * task used to import data 
 */
task('bulk', type: JavaExec, dependsOn: 'classes', description : 'Bulk data import on a target (defined by -Ptarget=[event|member|...]]') {

	//available imports
	ext{
		event = relativePath('src/main/scripts/events.csv')
		member = relativePath('src/main/scripts/member.csv')
	}
	
	//check the target is set 
	doFirst {
		if(!project.hasProperty('target')){
		
			println "\nUsage:"
			println "\tgradle bulk -Ptarget=[event|member|...]"
			println "where target is : "
			bulk.ext.each{ println it }
			
			throw new GradleException('Target argument required')
		} else {
			println "\nBulk import of  $target\n"
		}
	}
	
	main = 'org.yajug.users.bulkimport.BulkImport'
	classpath = sourceSets.main.runtimeClasspath
	if(project.hasProperty('target')){
		bulk{
			args target
			args bulk.ext[target]
			debug false
		}
	}
}
