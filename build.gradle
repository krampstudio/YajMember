/**
 * Build 
 * 
 * @requires gradle >= 1.2
 * 
 * Tasks:
 * 
 * - compile: 				gradle compileJava
 * - test: 					gradle test
 * - single unit test: 		gradle test -Dtest.single=TestClassName
 * - run the app in dev: 	gradle jettyRun
 * - data import:			gradle bulk
 * - client install			gradle install
 * - build the war			gradle war
 * 
 * Debug:
 * To remote debug when running the web server using jettyRun, export the following variable:
 * 		export GRADLE_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,address=9999,server=y"
 * To debug a bulk task, set the debug option to true
 */

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'

//yes, we use the current stable version of Java ;)
sourceCompatibility = 1.7

//depdency management
repositories { mavenCentral() }

dependencies {
	compile "org.mongodb:mongo-java-driver:$mongoDriverVersion"
	compile "org.apache.commons:commons-lang3:$commonsLangVersion"
	compile "com.google.code.gson:gson:$gsonVersion"
	compile "com.google.inject:guice:$guiceVersion"
	
	compile "com.sun.jersey:jersey-bundle:$jerseyVersion"
	compile "com.sun.jersey.contribs:jersey-guice:$jerseyVersion"
	compile "com.sun.jersey.contribs:jersey-multipart:$jerseyVersion"
	compile("com.google.api-client:google-api-client:$googleApiClientVersion"){
		exclude group: 'com.google.guava'
	}
	compile("com.google.oauth-client:google-oauth-client:$googleApiClientVersion"){
		exclude group: 'com.google.guava'
	}
	compile("com.google.oauth-client:google-oauth-client-servlet:$googleApiClientVersion"){
		exclude group: 'com.google.guava'
	}
	compile("com.google.http-client:google-http-client-gson:$googleApiClientVersion"){
		exclude group: 'com.google.guava'
	}
	compile "com.google.guava:guava:$guavaVersion"
	compile "net.sf.supercsv:super-csv:$superCsvVersion"
	compile "org.imgscalr:imgscalr-lib:$scalrVersion"
	compile "org.slf4j:slf4j-api:$slf4jVersion"
	compile "ch.qos.logback:logback-core:$logbackVersion"
	compile "ch.qos.logback:logback-classic:$logbackVersion"
	providedCompile "javax.servlet:servlet-api:$servletVersion"
	runtime "org.codehaus.groovy:groovy:$groovyVersion"
	testCompile "junit:junit:$junitVersion"
	testCompile "org.jukito:jukito:$jukitoVersion"
}

//Override the war task
war{
	//add the static resources to the war
	from("build/static")
}

//Override the test task
test {
	//makes the standard streams (err and out) visible at console when running tests
	testLogging.showStandardStreams = true
}


//Build client side for war
task("gruntBuild", type: Exec, description: "Build client side resource") {
	commandLine "$grunt", 'build'
}
war.dependsOn("gruntBuild");


/*
 * Developpement server
 */

//jetty conf
httpPort = 8000
stopPort = 8989
stopKey = 'stopMe'

//in development, we use a different jetty webdefault.xml to set the useFileMappedBuffer to false
//to enable file modification when the in place server is running
jettyRun{
	webDefaultXml = file('src/main/config/webdefault.xml')
}

// Clean up task, install task should be called after
task("cleanUp", dependsOn: "clean", type: Delete, description: "Remove all generated files"){
	delete 'node_modules', 'src/main/webapp/js/lib'
}


/*
 * Install tasks
 */

task("npmInstall", type: Exec, description: "Install node dependencies") {
	commandLine "$npm", 'install'
}
task("gruntInstall", type: Exec, dependsOn: "npmInstall",  description: "Install node dependencies") {
	commandLine "$grunt", 'install'
}
task("install", dependsOn: ["npmInstall", "gruntInstall"], description: "Client set up process");


/*
 * Bulk import 
 */

task("bulk", description : "Bulk data import");
['event','member','membership'].each {target ->
	//create a task for each bulk import
	task("bulk${target}", type: JavaExec, dependsOn: 'classes', description : "Bulk data import of ${target}s") {

		doFirst {
			println "\nBulk import of  $target\n"
		}
		
		main = 'org.yajug.users.bulkimport.BulkImport'
		classpath = sourceSets.main.runtimeClasspath
		args target
		args relativePath("src/main/scripts/${target}.csv")
		debug false
			
	}
	//add a dependency to the bulk task
	bulk.dependsOn("bulk${target}")
}